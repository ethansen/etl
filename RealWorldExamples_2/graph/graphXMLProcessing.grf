<?xml version="1.0" encoding="UTF-8"?>
<Graph author="Petr" created="Fri Jul 02 14:49:13 CEST 2010" guiVersion="0.0.0.devel" id="1278077546166" licenseType="Evaluation Devel" modified="Tue May 31 10:04:44 CEST 2011" modifiedBy="avackova" name="graphXMLProcessing" revision="1.96" showComponentDetails="true">
<Global>
<Metadata id="Metadata5" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter=";" name="actor" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\n" recordSize="-1" type="delimited">
<Field eofAsDelimiter="false" name="actor_id" nullable="true" shift="0" size="0" type="integer"/>
<Field eofAsDelimiter="false" name="first_name" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="last_name" nullable="true" shift="0" size="0" type="string"/>
<Field name="movie_id" type="integer"/>
</Record>
</Metadata>
<Metadata id="Metadata3">
<Record name="footer" type="delimited">
<Field eofAsDelimiter="true" name="field1" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata0" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter=";" name="movie" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\n" recordSize="-1" type="delimited">
<Field eofAsDelimiter="false" name="movie_id" nullable="true" shift="0" size="0" type="integer"/>
<Field eofAsDelimiter="false" name="title" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="description" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="release_year" nullable="true" shift="0" size="0" type="integer"/>
<Field eofAsDelimiter="false" name="language" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="length" nullable="true" shift="0" size="0" type="integer"/>
<Field eofAsDelimiter="false" name="rating" nullable="true" shift="0" size="0" type="string"/>
<Field name="category" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata1" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter=";" name="movie_short" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\n" recordSize="-1" type="delimited">
<Field eofAsDelimiter="false" name="movie_id" nullable="true" shift="0" size="0" type="integer"/>
<Field eofAsDelimiter="false" name="title" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="description" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="release_year" nullable="true" shift="0" size="0" type="integer"/>
<Field name="category" type="string"/>
<Field name="actor_id" type="integer"/>
</Record>
</Metadata>
<Metadata id="Metadata2">
<Record fieldDelimiter="|" name="xml_record" recordDelimiter="\n" type="delimited">
<Field name="data" type="string"/>
</Record>
</Metadata>
<Property fileURL="workspace.prm" id="GraphParameter0"/>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" folded="false" height="99" id="Note0" textColorB="0" textColorG="0" textColorR="0" textFontSize="10" title="XML data processing" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="416" x="216" y="82">
<attr name="text"><![CDATA[The structure of input XML file is defined by XSD so you can use visual mapping editor for defining of mapping input fields to inner clover fields.]]></attr>
</Note>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" folded="false" height="349" id="Note1" textColorB="0" textColorG="0" textColorR="0" textFontSize="10" title="Read XML file" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="172" x="24" y="22">
<attr name="text"><![CDATA[It reads data from following XML structure.

<movies>
  <movie>
     ...
    <actor>...</actor>
    <actor>...</actor>
  </movie>
  ...
</movies>]]></attr>
</Note>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" folded="false" height="369" id="Note2" textColorB="0" textColorG="0" textColorR="0" textFontSize="10" title="Write XML file" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="151" x="744" y="28">
<attr name="text"><![CDATA[It writes data to following XML structure.

<actors>
  <actor>
    <movie>...</movie>
    <movie>...</movie>
  </actor>
  ...
</actors>]]></attr>
</Note>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" folded="false" height="199" id="Note3" textColorB="0" textColorG="0" textColorR="0" textFontSize="10" title="      " titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="326" x="414" y="450">
<attr name="text"><![CDATA[Almost complete  HTML page with list of movies formatted in table structure is generated. The footer is added in the next phase.
]]></attr>
</Note>
<Note alignment="1" backgroundColorB="0" backgroundColorG="196" backgroundColorR="255" folded="false" height="86" id="Note4" textColorB="0" textColorG="0" textColorR="0" textFontSize="12" title="How to process a XML file and create a new one?" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="12" width="812" x="22" y="-109">
<attr name="text"><![CDATA[We have a list of movies and the actors in them. We want to have a reverse list with actors and the movies they are in. Use the provided movies.xml file.]]></attr>
</Note>
<Dictionary/>
</Global>
<Phase number="0">
<Node enabled="enabled" fileURL="${DATAIN_DIR}/others/header_html.txt" guiHeight="101" guiName="reads header" guiWidth="128" guiX="36" guiY="552" id="DATA_READER1" type="DATA_READER">
<attr name="guiDescription"><![CDATA[Movie file header]]></attr>
</Node>
<Node append="false" charset="ISO-8859-1" enabled="enabled" fileURL="${DATAOUT_DIR}/others/Movies_list.html" guiHeight="101" guiName="writes header" guiWidth="129" guiX="216" guiY="552" id="DATA_WRITER3" makeDirs="true" type="DATA_WRITER">
<attr name="guiDescription"><![CDATA[Movie file header]]></attr>
</Node>
<Edge fromNode="DATA_READER1:0" guiBendpoints="" guiLocks="null|null|null" guiRouter="Manhattan" id="Edge14" inPort="Port 0 (in)" metadata="Metadata3" outPort="Port 0 (output)" toNode="DATA_WRITER3:0"/>
</Phase>
<Phase number="1">
<Node charset="UTF-8" enabled="enabled" fileURL="${DATAOUT_DIR}/others/Actors.xml" guiHeight="101" guiName="writes body" guiWidth="128" guiX="934" guiY="279" id="DATA_WRITER0" makeDirs="true" type="DATA_WRITER">
<attr name="guiDescription"><![CDATA[Creates body of a xml file]]></attr>
</Node>
<Node append="true" charset="ISO-8859-1" enabled="enabled" fileURL="${DATAOUT_DIR}/others/Movies_list.html" guiHeight="85" guiName="writes html" guiWidth="128" guiX="604" guiY="552" id="DATA_WRITER1" makeDirs="true" type="DATA_WRITER">
<attr name="guiDescription"><![CDATA[Movie file body]]></attr>
</Node>
<Node dedupKey="actor_id(a)" enabled="enabled" guiHeight="69" guiName="1 record per actor" guiWidth="157" guiX="576" guiY="228" id="DEDUP0" type="DEDUP"/>
<Node enabled="enabled" guiHeight="85" guiName="join actor_id to movie" guiWidth="184" guiX="408" guiY="324" id="EXT_HASH_JOIN0" joinKey="$movie_id=$movie_id" type="EXT_HASH_JOIN">
<attr name="transform"><![CDATA[//#TL

// Transforms input record into output record.
function transform() {
	$0.actor_id := $0.actor_id;
	$0.movie_id := $1.movie_id;
	$0.title := $1.title;
	$0.description := $1.description;
	$0.release_year := $1.release_year;
	$0.category := $1.category;
}

// Called to return a user-defined error message when an error occurs.
// function getMessage() {}

// Called during component initialization.
// function init() {}

// Called after the component finishes.
// function finished() {}
]]></attr>
</Node>
<Node enabled="enabled" guiHeight="101" guiName="ExtHashJoin" guiWidth="128" guiX="758" guiY="279" id="EXT_HASH_JOIN1" joinKey="$actor_id=$actor_id" slaveDuplicates="true" type="EXT_HASH_JOIN">
<attr name="transform"><![CDATA[//#CTL2
boolean first_record;
integer key;
string header= "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<actors>\n";
string data;

// Transforms input record into output record.
function integer transform() {
	if (first_record) {
		data = header + "\t<actor actor_id=\"" + $actor.actor_id + "\">\n\t\t<first_name>" + $actor.first_name + "</first_name>\n\t\t<last_name>" + $actor.last_name + "</last_name>\n";
		key = $actor.actor_id;
		first_record = false;
	}else if (key != $actor.actor_id) {//new actor
		key = $actor.actor_id;
		data = "\t</actor>\n\t<actor actor_id=\"" + $actor.actor_id + "\">\n\t\t<first_name>" + $actor.first_name + "</first_name>\n\t\t<last_name>" + $actor.last_name + "</last_name>\n";
	}else{
		data = "";
	}
	//append movie information
	data = data + "\t\t<movie>\n\t\t\t<title>" + $movie_short.title + "</title>\n\t\t\t<description>" + $movie_short.description + "</description>\n\t\t</movie>";
	$data = data;
	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
function void preExecute() {
	first_record = true;
}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" guiHeight="85" guiName="actor_id" guiWidth="128" guiX="408" guiY="228" id="EXT_SORT0" sortKey="actor_id(a)" type="EXT_SORT"/>
<Node enabled="enabled" guiHeight="69" guiName="defines html" guiWidth="128" guiX="425" guiY="552" id="REFORMAT0" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$data = concat("<tr>\n<td style=\"border: 1px solid black; padding: 3px\">", toString($movie_id), "</td>\n",
					"<td style=\"border: 1px solid black; padding: 3px\">", $title, "</td>\n",
					"<td style=\"border: 1px solid black; padding: 3px\">", $description, "</td>\n",
					"<td style=\"border: 1px solid black; padding: 3px\">", $language, "</td>\n",
					"<td style=\"border: 1px solid black; padding: 3px\">", toString($release_year), "</td>\n",
					"<td style=\"border: 1px solid black; padding: 3px\">", toString($length), "</td>\n</tr>");
	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" guiHeight="72" guiName="SimpleCopy" guiWidth="128" guiX="216" guiY="360" id="SIMPLE_COPY0" type="SIMPLE_COPY"/>
<Node enabled="enabled" guiHeight="72" guiName="SimpleCopy" guiWidth="128" guiX="216" guiY="228" id="SIMPLE_COPY1" type="SIMPLE_COPY"/>
<Node charset="UTF-8" enabled="enabled" guiHeight="101" guiName="Read Movies.xml" guiWidth="150" guiX="35" guiY="254" id="XML_EXTRACT0" schema="${DATAIN_DIR}/others/movies.xsd" sourceUri="${DATAIN_DIR}/others/Movies.xml" type="XML_EXTRACT" useNestedNodes="true">
<attr name="mapping"><![CDATA[<Mappings>
	<Mapping element="movies">
		<Mapping element="movie" outPort="1">
			<Mapping element="actor" outPort="0" parentKey="movie_id" generatedKey="movie_id"
					xmlFields="first_name;actor_id;last_name"
					cloverFields="first_name;actor_id;last_name"/>
		</Mapping>
	</Mapping>
</Mappings>
]]></attr>
</Node>
<Edge debugMode="true" fromNode="DEDUP0:0" guiBendpoints="" guiLocks="null|null|null" guiRouter="Manhattan" id="Edge7" inPort="Port 0 (driver)" metadata="Metadata5" outPort="Port 0 (unique)" toNode="EXT_HASH_JOIN1:0"/>
<Edge debugMode="false" fromNode="EXT_HASH_JOIN0:0" guiBendpoints="" guiLocks="null|null|null" guiRouter="Manhattan" id="Edge6" inPort="Port 1 (slave)" metadata="Metadata1" outPort="Port 0 (out)" toNode="EXT_HASH_JOIN1:1"/>
<Edge debugMode="false" fromNode="EXT_HASH_JOIN1:0" guiBendpoints="" guiLocks="null|null|null" guiRouter="Manhattan" id="Edge9" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="DATA_WRITER0:0"/>
<Edge fromNode="EXT_SORT0:0" guiBendpoints="" guiLocks="null|null|null" guiRouter="Manhattan" id="Edge8" inPort="Port 0 (in)" metadata="Metadata5" outPort="Port 0 (out)" toNode="DEDUP0:0"/>
<Edge fromNode="REFORMAT0:0" guiBendpoints="" guiLocks="null|null|null" guiRouter="Manhattan" id="Edge13" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="DATA_WRITER1:0"/>
<Edge fromNode="SIMPLE_COPY0:0" guiBendpoints="" guiLocks="null|null|null" guiRouter="Manhattan" id="Edge2" inPort="Port 1 (slave)" metadata="Metadata0" outPort="Port 0 (out)" toNode="EXT_HASH_JOIN0:1"/>
<Edge fromNode="SIMPLE_COPY0:1" guiBendpoints="" guiLocks="null|null|null" guiRouter="Manhattan" id="Edge3" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 1 (out)" toNode="REFORMAT0:0"/>
<Edge fromNode="SIMPLE_COPY1:0" guiBendpoints="" guiLocks="null|null|null" guiRouter="Manhattan" id="Edge5" inPort="Port 0 (in)" metadata="Metadata5" outPort="Port 0 (out)" toNode="EXT_SORT0:0"/>
<Edge fromNode="SIMPLE_COPY1:1" guiBendpoints="" guiLocks="null|null|null" guiRouter="Manhattan" id="Edge4" inPort="Port 0 (driver)" metadata="Metadata5" outPort="Port 1 (out)" toNode="EXT_HASH_JOIN0:0"/>
<Edge debugMode="false" fromNode="XML_EXTRACT0:0" guiBendpoints="" guiLocks="null|null|null" guiRouter="Manhattan" id="Edge1" inPort="Port 0 (in)" metadata="Metadata5" outPort="Port 0 (out)" toNode="SIMPLE_COPY1:0"/>
<Edge debugMode="false" fromNode="XML_EXTRACT0:1" guiBendpoints="" guiLocks="null|null|null" guiRouter="Manhattan" id="Edge0" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 1 (out)" toNode="SIMPLE_COPY0:0"/>
</Phase>
<Phase number="2">
<Node enabled="enabled" fileURL="${DATAIN_DIR}/others/footer_xml.txt" guiHeight="85" guiName="reads footer" guiWidth="128" guiX="756" guiY="408" id="DATA_READER0" type="DATA_READER">
<attr name="guiDescription"><![CDATA[Actor file footer]]></attr>
</Node>
<Node enabled="enabled" fileURL="${DATAIN_DIR}/others/footer_html.txt" guiHeight="101" guiName="reads footer" guiWidth="128" guiX="756" guiY="552" id="DATA_READER2" type="DATA_READER">
<attr name="guiDescription"><![CDATA[Movie file footer]]></attr>
</Node>
<Node append="true" enabled="enabled" fileURL="${DATAOUT_DIR}/others/Actors.xml" guiHeight="85" guiName="adds footer" guiWidth="128" guiX="936" guiY="408" id="DATA_WRITER2" makeDirs="true" type="DATA_WRITER">
<attr name="guiDescription"><![CDATA[Actor file footer]]></attr>
</Node>
<Node append="true" charset="ISO-8859-1" enabled="enabled" fileURL="${DATAOUT_DIR}/others/Movies_list.html" guiHeight="101" guiName="adds footer" guiWidth="128" guiX="936" guiY="552" id="DATA_WRITER4" makeDirs="true" type="DATA_WRITER">
<attr name="guiDescription"><![CDATA[Movie file footer]]></attr>
</Node>
<Edge fromNode="DATA_READER0:0" guiBendpoints="" guiLocks="null|null|null" guiRouter="Manhattan" id="Edge11" inPort="Port 0 (in)" metadata="Metadata3" outPort="Port 0 (output)" toNode="DATA_WRITER2:0"/>
<Edge fromNode="DATA_READER2:0" guiBendpoints="" guiLocks="null|null|null" guiRouter="Manhattan" id="Edge10" inPort="Port 0 (in)" metadata="Metadata3" outPort="Port 0 (output)" toNode="DATA_WRITER4:0"/>
</Phase>
</Graph>
